variables:
  DOCKER_REPO: longpt233/ecommerce-backend-image
  TAG_LATEST: $DOCKER_REPO:latest
  TAG_COMMIT: $DOCKER_REPO:$CI_COMMIT_SHORT_SHA    #  predefined variable
  CI_DEPLOY_SERVER_USERNAME: azureuser
  CI_DEPLOY_SERVER_IP: 20.222.40.150
  CI_REGISTRY_HOST: https://index.docker.io/v1/
  CI_REGISTRY_USER: longpt233

stages:
  - test
  - build
  - deploy

# always run before script stage
before_script:
  - echo "hello this before script"

unit_test:
  image: maven:3.6.1-jdk-8-alpine
  stage: test   # same name stages
  script:
    - mvn test
  # Only build off of master branch:
  only:
    - test

build_image:
  image: docker:stable
  stage: build

  # This will run a Docker daemon in a container (Docker-In-Docker), which will
  # be available at thedockerhost:2375. If you make e.g. port 5000 public in Docker
  # (`docker run -p 5000:5000 yourimage`) it will be exposed at thedockerhost:5000.
  services:
    - name: docker:dind
      alias: thedockerhost

  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: tcp://thedockerhost:2375/
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  script:
    - echo "start build image"
    - echo "$DOCKER_REPO"
    - echo "$TAG_COMMIT"
    - echo "$TAG_LATEST"
    - docker build -t "$TAG_COMMIT" -t "$TAG_LATEST" .
    - docker images
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY_HOST"  # pass in setting/cicd/variable
    - docker push "$TAG_COMMIT"
    - docker push "$TAG_LATEST"

  only:
    - main

deploy_server:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh-add <(echo "$CI_DEPLOY_SERVER_PRIVATE_KEY")
    - ssh -o StrictHostKeyChecking=no $CI_DEPLOY_SERVER_USERNAME@$CI_DEPLOY_SERVER_IP 'docker container rm -f my-app-container-ecom || true'
    - ssh -o StrictHostKeyChecking=no $CI_DEPLOY_SERVER_USERNAME@$CI_DEPLOY_SERVER_IP "docker run -d -p 8099:8099 --name my-app-container-ecom $TAG_COMMIT"

  only:
    - main

